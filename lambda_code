import json
import boto3
import requests
from email.mime.multipart import MIMEMultipart
from email.mime.application import MIMEApplication
from email.mime.text import MIMEText

# AWS clients
s3 = boto3.client('s3')
ses = boto3.client('ses', region_name='ap-south-1')  # Adjust region if needed
sns = boto3.client('sns')
cloudwatch = boto3.client('cloudwatch')

# Replace these with your actual values before running
BUCKET = 'your-s3-bucket-name'
SENDER = "your-verified-ses-sender@example.com"
RECIPIENT = "recipient@example.com"
SNS_TOPIC_ARN = "arn:aws:sns:your-region:your-account-id:your-topic-name"
HTML2PDF_API_KEY = "your-html2pdf-api-key"

def lambda_handler(event, context):
    try:
        data = json.loads(event['body'])
        customer_name = data['customer_name']
        invoice_id = data['invoice_id']
        items = data['items']
        date = data['date']

        # Create HTML invoice
        html = f"""
        <html><body>
        <h1>Invoice {invoice_id}</h1>
        <p>Date: {date}</p>
        <p>Customer: {customer_name}</p>
        <table border="1">
            <tr><th>Description</th><th>Quantity</th><th>Price</th><th>Total</th></tr>
        """

        total = 0
        for item in items:
            subtotal = item['quantity'] * item['price']
            total += subtotal
            html += f"<tr><td>{item['description']}</td><td>{item['quantity']}</td><td>{item['price']}</td><td>{subtotal}</td></tr>"

        html += f"</table><h2>Total: ${total}</h2></body></html>"

        # Convert HTML to PDF using HTML2PDF API
        pdf_response = requests.post(
            'https://api.html2pdf.app/v1/generate',
            json={
                "html": html,
                "apiKey": HTML2PDF_API_KEY
            }
        )

        if pdf_response.status_code != 200:
            raise Exception("Failed to convert HTML to PDF")

        pdf_content = pdf_response.content

        # Upload PDF to S3
        s3_key = f'invoices/{invoice_id}.pdf'
        s3.put_object(
            Bucket=BUCKET,
            Key=s3_key,
            Body=pdf_content,
            ContentType='application/pdf'
        )

        # Send email with PDF using SES
        msg = MIMEMultipart()
        msg['Subject'] = f'Invoice {invoice_id}'
        msg['From'] = SENDER
        msg['To'] = RECIPIENT

        body = MIMEText(f"Hi {customer_name},\n\nPlease find attached your invoice {invoice_id}.", 'plain')
        msg.attach(body)

        attachment = MIMEApplication(pdf_content)
        attachment.add_header('Content-Disposition', 'attachment', filename=f"{invoice_id}.pdf")
        msg.attach(attachment)

        ses.send_raw_email(
            Source=SENDER,
            Destinations=[RECIPIENT],
            RawMessage={'Data': msg.as_string()}
        )

        # Send SNS notification
        sns.publish(
            TopicArn=SNS_TOPIC_ARN,
            Subject=f"Invoice Created: {invoice_id}",
            Message=f"Invoice {invoice_id} for {customer_name} has been created and emailed.\nDate: {date}\nTotal: ${total}"
        )

        # Put success metric to CloudWatch
        cloudwatch.put_metric_data(
            Namespace='InvoiceService',
            MetricData=[
                {
                    'MetricName': 'InvoiceCreatedSuccess',
                    'Value': 1,
                    'Unit': 'Count'
                }
            ]
        )

        return {
            'statusCode': 200,
            'body': json.dumps({'message': 'Invoice created, emailed, and SNS notification sent'}),
            'headers': {'Content-Type': 'application/json'}
        }

    except Exception as e:
        # Put error metric to CloudWatch
        cloudwatch.put_metric_data(
            Namespace='InvoiceService',
            MetricData=[
                {
                    'MetricName': 'InvoiceCreationError',
                    'Value': 1,
                    'Unit': 'Count'
                }
            ]
        )

        return {
            'statusCode': 500,
            'body': json.dumps({'message': str(e)}),
            'headers': {'Content-Type': 'application/json'}
        }
